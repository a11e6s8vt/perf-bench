[package]
name = "perf-bench"
version = "0.1.0"
edition = "2021"

[dependencies]
perf-bench-common = { path = "../perf-bench-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
addr2line = { workspace = true }
blazesym = { workspace = true }
bytes = { workspace = true }
clap = { workspace = true, features = ["std", "derive"] }
env_logger = { workspace = true }
debugid = { workspace = true }
futures = { workspace = true }
itertools = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
memmap2 = { workspace = true }
object = { workspace = true, features = ["std", "read_core", "elf", "unaligned"] } 
proc-maps = { workspace = true }
procfs = { workspace = true }
rustc-demangle = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["full"] }
uuid = { workspace = true }

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
perf-bench-ebpf = { path = "../perf-bench-ebpf" }

[[bin]]
name = "perf-bench"
path = "src/main.rs"
